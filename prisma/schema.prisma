// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// BOM (Bill of Materials) related tables
model BOMFile {
  id          String   @id @default(cuid())
  fileName    String
  fileSize    Int
  uploadedAt  DateTime @default(now())
  processedAt DateTime?
  status      String   @default("uploaded") // uploaded, processing, completed, failed
  
  // Processing results
  totalItems     Int?
  suppliersFound Int?
  processingTime String?
  
  // Relationships
  bomItems       BOMItem[]
  purchaseReqs   PurchaseRequisition[]
  
  @@map("bom_files")
}

model BOMItem {
  id          String  @id @default(cuid())
  partNumber  String
  description String
  quantity    Int
  supplier    String
  symbol      String?
  category    String?
  remarks     String?
  unitPrice   Float   @default(0.0)
  totalPrice  Float   @default(0.0)
  rowIndex    Int
  
  // Foreign keys
  bomFileId   String
  bomFile     BOMFile @relation(fields: [bomFileId], references: [id], onDelete: Cascade)
  
  // Relationships
  prItems     PRItem[]
  
  @@map("bom_items")
}

// Purchase Requisition related tables
model PurchaseRequisition {
  id         String   @id @default(cuid())
  prNumber   String   @unique
  supplier   String
  totalItems Int
  totalValue Float
  status     String   @default("Draft") // Draft, Review, Approved, Sent
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Foreign keys
  bomFileId  String
  bomFile    BOMFile  @relation(fields: [bomFileId], references: [id], onDelete: Cascade)
  
  // Relationships
  items      PRItem[]
  
  @@map("purchase_requisitions")
}

model PRItem {
  id          String  @id @default(cuid())
  partNumber  String
  description String
  quantity    Int
  symbol      String?
  category    String?
  remarks     String?
  unitPrice   Float   @default(0.0)
  totalPrice  Float   @default(0.0)
  
  // Foreign keys
  prId        String
  pr          PurchaseRequisition @relation(fields: [prId], references: [id], onDelete: Cascade)
  
  bomItemId   String?
  bomItem     BOMItem? @relation(fields: [bomItemId], references: [id])
  
  @@map("pr_items")
}

// Document Assistant related tables
model Document {
  id           String   @id @default(cuid())
  fileName     String
  fileSize     Int
  fileType     String
  uploadedAt   DateTime @default(now())
  processedAt  DateTime?
  status       String   @default("uploaded") // uploaded, processing, completed, failed
  
  // Extracted data
  supplier     String?
  poNumber     String?
  projectNumber String?
  deliveryDate DateTime?
  totalAmount  Float?
  
  // File storage info
  filePath     String?
  
  // Relationships
  documentItems DocumentItem[]
  
  @@map("documents")
}

model DocumentItem {
  id          String @id @default(cuid())
  description String
  quantity    String?
  unitPrice   String?
  totalPrice  String?
  
  // Foreign keys
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_items")
}

// Report Builder related tables
model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending") // pending, processing, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Report data
  dataSource  String?  // ERP system name
  recordCount Int?
  completionRate Float?
  
  // Relationships
  reportSections ReportSection[]
  
  @@map("reports")
}

model ReportSection {
  id        String @id @default(cuid())
  name      String
  status    String @default("incomplete") // incomplete, complete, review
  dataCount Int?
  
  // Foreign keys
  reportId  String
  report    Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@map("report_sections")
}

// System settings and configuration
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}